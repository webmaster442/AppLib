//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.42000
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;


namespace AppLib.WPF.Shaders
{

    /// <summary>A transition effect </summary>
    public class TransitionColorizeEffect : ShaderEffect
    {
        /// <summary>Dependency property for Input</summary>
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(TransitionColorizeEffect), 0);
        /// <summary>Dependency property for Progress</summary>
        public static readonly DependencyProperty ProgressProperty = DependencyProperty.Register("Progress", typeof(double), typeof(TransitionColorizeEffect), new UIPropertyMetadata(((double)(0.3D)), PixelShaderConstantCallback(0)));

        /// <summary>
        /// Creates a new instance of TransitionColorizeEffect
        /// </summary>
        public TransitionColorizeEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("pack://application:,,,/AppLib.WPF;component/Resources/TransitionColorizeEffect.ps");
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(ProgressProperty);
        }

        /// <summary>
        /// Input Visual
        /// </summary>
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }

        /// <summary>The amount(%) of the transition from first texture to the second texture. </summary>
        public double Progress
        {
            get
            {
                return ((double)(this.GetValue(ProgressProperty)));
            }
            set
            {
                this.SetValue(ProgressProperty, value);
            }
        }
    }
}
