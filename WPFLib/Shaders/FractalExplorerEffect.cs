//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.42000
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace WPFLib.Shaders
{
    /// <summary>
    /// Fractal Explorer, Pixel shader 3.0
    /// </summary>
    public class FractalExplorerEffect : ShaderEffect
    {
        /// <summary>Dependency property for Input</summary>
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(FractalExplorerEffect), 0);
        /// <summary>Dependency property for Mode</summary>
        public static readonly DependencyProperty ModeProperty = DependencyProperty.Register("Mode", typeof(double), typeof(FractalExplorerEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(0)));
        /// <summary>Dependency property for Pan</summary>
        public static readonly DependencyProperty PanProperty = DependencyProperty.Register("Pan", typeof(Point), typeof(FractalExplorerEffect), new UIPropertyMetadata(new Point(0.5D, 0D), PixelShaderConstantCallback(1)));
        /// <summary>Dependency property for Zoom</summary>
        public static readonly DependencyProperty ZoomProperty = DependencyProperty.Register("Zoom", typeof(double), typeof(FractalExplorerEffect), new UIPropertyMetadata(((double)(3D)), PixelShaderConstantCallback(2)));
        /// <summary>Dependency property for Color Scale</summary>
        public static readonly DependencyProperty ColorScaleProperty = DependencyProperty.Register("ColorScale", typeof(Point3D), typeof(FractalExplorerEffect), new UIPropertyMetadata(new Point3D(4D, 5D, 6D), PixelShaderConstantCallback(3)));

        /// <summary>
        /// Creates a new instance of FractalExplorerEffect
        /// </summary>
        public FractalExplorerEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("pack://application:,,,/WPFLib;component/Resources/FractalExplorerEffect.ps");
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(ModeProperty);
            this.UpdateShaderValue(PanProperty);
            this.UpdateShaderValue(ZoomProperty);
            this.UpdateShaderValue(ColorScaleProperty);
        }

        /// <summary>
        /// Input Visual
        /// </summary>
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }

        /// <summary>Shader mode</summary>
        public double Mode
        {
            get
            {
                return ((double)(this.GetValue(ModeProperty)));
            }
            set
            {
                this.SetValue(ModeProperty, value);
            }
        }

        /// <summary>PAN</summary>
        public Point Pan
        {
            get
            {
                return ((Point)(this.GetValue(PanProperty)));
            }
            set
            {
                this.SetValue(PanProperty, value);
            }
        }

        /// <summary>Zoom</summary>
        public double Zoom
        {
            get
            {
                return ((double)(this.GetValue(ZoomProperty)));
            }
            set
            {
                this.SetValue(ZoomProperty, value);
            }
        }

        /// <summary>Color Scale</summary>
        public Point3D ColorScale
        {
            get
            {
                return ((Point3D)(this.GetValue(ColorScaleProperty)));
            }
            set
            {
                this.SetValue(ColorScaleProperty, value);
            }
        }
    }
}
